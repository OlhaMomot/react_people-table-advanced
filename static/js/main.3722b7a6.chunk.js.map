{"version":3,"sources":["components/NavBar.tsx","App.tsx","pages/HomePage.tsx","api.ts","utils/constants.tsx","components/PersonLink.tsx","components/PersonInfo.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","utils/getPreparedPeople.tsx","components/Loader/Loader.tsx","components/PeopleFilters.tsx","pages/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","NavBar","className","role","to","App","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","TABLE_COLUMN_NAMES","TABLE_SORT_FIELDS","CENTURIES","SEARCH_FILTER","All","Male","Female","PersonLink","person","name","sex","slug","useSearchParams","searchParams","pathname","search","toString","PersonInfo","personSlug","useParams","born","died","fatherName","motherName","mother","father","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","PeopleTable","people","sort","get","order","preparedPeople","query","trim","toLowerCase","centuries","getAll","findPersonByName","personName","find","peopleWithParents","map","length","filter","sexFilter","queryFilter","includes","bornCentury","Math","ceil","centuryFilter","getPreparedPeople","peopleToRender","sortedPeople","a","b","localeCompare","reverse","getSortedPeople","columnTitle","newSearchParams","currentColumnTitle","getSearchParams","Loader","PeopleFilters","setSearchParams","selectedCenturies","keys","type","placeholder","onChange","e","preventDefault","newQuery","target","values","century","date","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","getCurrentPeople","currentPeople","useEffect","isPeopleTableEmpty","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"0QAGMA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyCC,IAC5D,cACA,CAAE,8BAA+BD,GAFd,EAKRE,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAWJ,EACXM,GAAG,IAFL,kBAOA,cAAC,IAAD,CACEF,UAAWJ,EACXM,GAAG,UAFL,0BAUT,EC/BYC,EAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAMH,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UANW,ECJNI,EAAW,WACtB,OACE,oBAAIJ,UAAU,QAAd,sBAEH,E,4BCDKK,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,CAEM,SAAeI,IAAtB,+B,sDAAO,iHAEEL,EAAK,KACTM,MAAK,kBAAMC,MAAMR,EAAZ,IACLO,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCTA,IAAMC,EAAqB,CAChC,OACA,MACA,OACA,OACA,SACA,UAGWC,EAAoB,CAC/B,OACA,MACA,OACA,QAGWC,EAAY,CACvB,KACA,KACA,KACA,KACA,MAGWC,EAAgB,CAC3BC,IAAK,KACLC,KAAM,IACNC,OAAQ,K,QClBGC,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE1CC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,IACAC,EACEH,EADFG,KAEF,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,CACE3B,GAAI,CAAE4B,SAAS,MAAD,OAAQH,GAAQI,OAAQF,EAAaG,YACnDhC,UAAWF,IAAW,CACpB,kBDUkB,MCVC4B,IAHvB,SAMGD,GAGN,EChBYQ,EAA8B,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OACpCU,EAAeC,cAAfD,WAENR,EAQEF,EARFE,IACAU,EAOEZ,EAPFY,KACAC,EAMEb,EANFa,KACAC,EAKEd,EALFc,WACAC,EAIEf,EAJFe,WACAZ,EAGEH,EAHFG,KACAa,EAEEhB,EAFFgB,OACAC,EACEjB,EADFiB,OAGF,OACE,qBACE,UAAQ,SAERzC,UAAWF,IAAW,CACpB,yBAA0BoC,IAAeP,IAJ7C,UAOE,6BACE,cAAC,EAAD,CAAYH,OAAQA,MAGtB,6BAAKE,IACL,6BAAKU,IACL,6BAAKC,IAEL,6BACGG,EAEG,cAAC,EAAD,CAAYhB,OAAQgB,IAEpBD,GFfkB,MEmBxB,6BACGE,EAEG,cAAC,EAAD,CAAYjB,OAAQiB,IAEpBH,GFxBkB,QEHnBX,EAgCV,E,QCnDM,SAASe,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcX,YA+BhB,OAjBAe,OAAOC,QAAQJ,GACZK,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFN,EAAUO,OAAOF,GACRG,MAAMC,QAAQH,IAEvBN,EAAUO,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZV,EAAUW,OAAON,EAAKK,EACvB,KAEDV,EAAUY,IAAIP,EAAKC,EAEtB,IAGIN,EAAUb,UAClB,C,4BC/BY0B,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBjC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIE3B,GAAI,CACF6B,OAAQW,EAAcb,EAAc+B,KAElCC,GAPN,aASGF,IAGN,ECtBYG,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,EAAuBnC,cAAhBC,EAAP,oBACMmC,EAAOnC,EAAaoC,IAAI,SAAW,KACnCC,EAAQrC,EAAaoC,IAAI,UAAY,KAErCE,EChByB,SAC/BJ,EACAlC,GACI,IAAD,EACGH,EAAMG,EAAaoC,IAAI,QAAU,KACjCG,GAAQ,UAAAvC,EAAaoC,IAAI,gBAAjB,eAA2BI,OAAOC,gBAAiB,GAC3DC,EAAY1C,EAAa2C,OAAO,YAAc,GAE9CC,EAAmB,SAACC,GACxB,OAAOX,EAAOY,MAAK,qBAAGlD,OAAoBiD,CAAvB,GACpB,EAEKE,EAAoBb,EAAOc,KAAI,SAAArD,GACnC,IAAMgB,EAASiC,EAAiBjD,EAAOe,YAEjCE,EAASgC,EAAiBjD,EAAOc,YAEvC,OAAO,2BAAKd,GAAZ,IAAoBgB,SAAQC,UAC7B,IAED,OAAKf,GAAQ0C,GAAUG,EAAUO,OAI1BF,EAAkBG,QAAO,SAACvD,GAAY,IAAD,IACpCwD,GAAYtD,GAAMA,IAAQF,EAAOE,IACjCuD,GAAeb,GACnB5C,EAAOC,KAAK6C,cAAcY,SAASd,KAAnC,UACG5C,EAAOe,kBADV,aACG,EAAmB+B,cAAcY,SAASd,MAD7C,UAEG5C,EAAOc,kBAFV,aAEG,EAAmBgC,cAAcY,SAASd,IAGzCe,EAAeC,KAAKC,KAAK7D,EAAOY,KAAO,KAAMJ,WAC7CsD,GAAiBf,EAAUO,QAC5BP,EAAUW,SAASC,GAExB,OAAOH,GAAaC,GAAeK,CACpC,IAhBQV,CAiBV,CDtBwBW,CAAkBxB,EAAQlC,GAyC3C2D,EAvCkB,WACtB,IAAKxB,EACH,OAAOG,EAGT,IAAMsB,EAAetB,EAAeH,MAAK,SAAC0B,EAAGC,GAC3C,OAAQ3B,GACN,IAAK,OACL,IAAK,MACH,OAAO0B,EAAE1B,GAAM4B,cAAcD,EAAE3B,IACjC,IAAK,OACL,IAAK,OACH,OAAO0B,EAAE1B,GAAQ2B,EAAE3B,GACrB,QACE,OAAO,EAEZ,IAED,OAAIE,EACKuB,EAAaI,UAGfJ,CACR,CAgBsBK,GAEvB,OACE,mCACGN,EAAeV,OAEZ,wBACE,UAAQ,cACR9E,UAAU,uDAFZ,UAIE,gCACE,6BACGgB,EAAmB6D,KAAI,SAAAkB,GACtB,IAAMC,EA3BE,SAACD,GACvB,IAAME,EAAqBF,EAAYzB,cAEvC,OAAI2B,IAAuBjC,EAClB,CAAEA,KAAMiC,EAAoB/B,MAAO,MAGxC+B,IAAuBjC,GAASE,EAI7B,CAAEF,KAAM,KAAME,MAAO,MAHnB,CAAEF,KAAM,KAAME,MAAO,OAI/B,CAeuCgC,CAAgBH,GAExC,OAAO9E,EAAkBiE,SAASa,GAE9B,6BACE,uBAAM/F,UAAU,8BAAhB,UACG+F,EACD,cAAC,EAAD,CACEnC,OAAQoC,EADV,SAGE,sBAAMhG,UAAU,OAAhB,SACE,mBACEA,UAAWF,IAAW,MAAO,UAAW,CACtC,UAAWkE,IAAS+B,EAAYzB,cAChC,aACAN,IAAS+B,EAAYzB,gBAAkBJ,EACvC,eACAF,IAAS+B,EAAYzB,eAAiBJ,cAbzC6B,GAqBT,6BACGA,GADMA,EAId,QAIL,gCACGP,EAAeX,KAAI,SAAArD,GAAM,OACxB,cAAC,EAAD,CAAYA,OAAQA,GAAaA,EAAOG,KADhB,SAM9B,4DAIT,EElHYwE,G,MAAS,kBACpB,qBAAKnG,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,G,OCGToG,EAAgB,WAC3B,MAAwCxE,cAAxC,mBAAOC,EAAP,KAAqBwE,EAArB,KACMzC,EAAS,IAAId,gBAAgBjB,GAC7ByE,EAAoB1C,EAAOY,OAAO,YAAc,GAgBtD,OACE,sBAAKxE,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,mBAAGA,UAAU,aAAa,UAAQ,YAAlC,SACG+C,OAAOwD,KAAKpF,GAAe0D,KAC1B,SAAC3B,GAAD,OACE,cAAC,EAAD,CAEEU,OAAQ,CAAElC,IAAKP,EAAc+B,IAC7BlD,UAAWF,IAAW,CACpB,YAAa8D,EAAOK,IAAI,SAClB9C,EAAc+B,KALxB,SAQGA,GAPIA,EAFT,MAeJ,qBAAKlD,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRwG,KAAK,SACLxG,UAAU,QACVyG,YAAY,SACZtD,MAAOtB,EAAaoC,IAAI,UAAY,GACpCyC,SA3CgB,SAACC,GACzBA,EAAEC,iBAEF,IAAMC,EAAWF,EAAEG,OAAO3D,MAET,KAAb0D,EACFjD,EAAOR,OAAO,SAEdQ,EAAOH,IAAI,QAASoD,GAGtBR,EAAgBzC,EACjB,IAkCO,sBAAM5D,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACG+C,OAAOgE,OAAO7F,GAAW2D,KAAI,SAAAmC,GAAO,OACnC,cAAC,EAAD,CAEEpD,OAAQ,CACNoD,QAASV,EAAkBpB,SAAS8B,GAChCV,EAAkBvB,QAAO,SAAAkC,GAAI,OAAIA,IAASD,CAAb,IADxB,sBAEDV,GAFC,CAEkBU,KAE7B,UAAQ,UACRhH,UAAWF,IACT,cACA,CAAE,UAAWwG,EAAkBpB,SAAS8B,KAV5C,SAaGA,GAZIA,EAF4B,MAmBvC,qBAAKhH,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAU,gCACV4D,OAAQ,CAAEoD,QAAS,IAHrB,wBAWN,qBAAKhH,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CACV4D,OAAQ,CAAEQ,MAAO,KAAM1C,IAAK,KAAMsF,QAAS,MAF7C,mCASP,ECnGYE,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOpD,EAAP,KAAeqD,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,iDAAG,qGACvBH,GAAa,GADU,kBAGO3G,IAHP,OAGf+G,EAHe,OAKrBN,EAAUM,GALW,gDAOrBF,EAAgB,wBAPK,QAUvBF,GAAa,GAVU,yDAAH,qDAatBK,qBAAU,WACRF,GACD,GAAE,IAEH,IAAMG,GAAsB7D,EAAOe,SAAWyC,IAAiBF,EAE/D,OACE,qCACE,oBAAIrH,UAAU,QAAd,yBACA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,YACK+D,EAAOe,QACR,qBAAK9E,UAAU,uCAAf,SACE,cAAC,EAAD,MAIJ,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGqH,GACC,cAAC,EAAD,IAGDE,GACC,mBAAG,UAAQ,qBAAqBvH,UAAU,kBAA1C,SACGuH,IAIJK,GACC,mBAAG,UAAQ,kBAAX,iDAKC7D,EAAOe,QACR,cAAC,EAAD,CAAaf,OAAQA,gBAQpC,ECrEY8D,EAAe,WAC1B,OACE,oBAAI7H,UAAU,QAAd,2BAEH,ECOY8H,EAAO,WAClB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,cAAC,IAAD,CAAOA,KAAK,eAAeC,QAAS,cAAC,EAAD,QAEtC,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAU9H,GAAG,KAAKgI,SAAO,MACrD,cAAC,IAAD,CAAOH,KAAK,IAAIC,QAAS,cAAC,EAAD,YAKlC,ECnBDG,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,I","file":"static/js/main.3722b7a6.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const NavBar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const TABLE_COLUMN_NAMES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const TABLE_SORT_FIELDS = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n];\n\nexport const CENTURIES = [\n  '16',\n  '17',\n  '18',\n  '19',\n  '20',\n];\n\nexport const SEARCH_FILTER = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nexport const NO_PARENT_NAME = '-';\nexport const FEMALE_SEX = 'f';\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { FEMALE_SEX } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{ pathname: `../${slug}`, search: searchParams.toString() }}\n      className={classNames({\n        'has-text-danger': sex === FEMALE_SEX,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { NO_PARENT_NAME } from '../utils/constants';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonInfo: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n  const {\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={slug}\n      className={classNames({\n        'has-background-warning': personSlug === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {mother\n          ? (\n            <PersonLink person={mother} />\n          ) : (\n            motherName || NO_PARENT_NAME\n          )}\n      </td>\n\n      <td>\n        {father\n          ? (\n            <PersonLink person={father} />\n          ) : (\n            fatherName || NO_PARENT_NAME\n          )}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\nimport { TABLE_COLUMN_NAMES, TABLE_SORT_FIELDS } from '../utils/constants';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { PersonInfo } from './PersonInfo';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const preparedPeople = getPreparedPeople(people, searchParams);\n\n  const getSortedPeople = () => {\n    if (!sort) {\n      return preparedPeople;\n    }\n\n    const sortedPeople = preparedPeople.sort((a, b) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return a[sort].localeCompare(b[sort]);\n        case 'born':\n        case 'died':\n          return a[sort] - b[sort];\n        default:\n          return 1;\n      }\n    });\n\n    if (order) {\n      return sortedPeople.reverse();\n    }\n\n    return sortedPeople;\n  };\n\n  const getSearchParams = (columnTitle: string) => {\n    const currentColumnTitle = columnTitle.toLowerCase();\n\n    if (currentColumnTitle !== sort) {\n      return { sort: currentColumnTitle, order: null };\n    }\n\n    if (currentColumnTitle === sort && !order) {\n      return { sort: null, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const peopleToRender = getSortedPeople();\n\n  return (\n    <>\n      {peopleToRender.length\n        ? (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                {TABLE_COLUMN_NAMES.map(columnTitle => {\n                  const newSearchParams = getSearchParams(columnTitle);\n\n                  return TABLE_SORT_FIELDS.includes(columnTitle)\n                    ? (\n                      <th key={columnTitle}>\n                        <span className=\"is-flex is-flex-wrap-nowrap\">\n                          {columnTitle}\n                          <SearchLink\n                            params={newSearchParams}\n                          >\n                            <span className=\"icon\">\n                              <i\n                                className={classNames('fas', 'fa-sort', {\n                                  'fa-sort': sort !== columnTitle.toLowerCase(),\n                                  'fa-sort-up':\n                                  sort === columnTitle.toLowerCase() && !order,\n                                  'fa-sort-down':\n                                  sort === columnTitle.toLowerCase() && order,\n                                })}\n                              />\n                            </span>\n                          </SearchLink>\n                        </span>\n                      </th>\n                    ) : (\n                      <th key={columnTitle}>\n                        {columnTitle}\n                      </th>\n                    );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {peopleToRender.map(person => (\n                <PersonInfo person={person} key={person.slug} />\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          'There are no people matching the current search criteria'\n        )}\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (\n  people: Person[],\n  searchParams: URLSearchParams,\n) => {\n  const sex = searchParams.get('sex') || null;\n  const query = searchParams.get('query')?.trim().toLowerCase() || '';\n  const centuries = searchParams.getAll('century') || [];\n\n  const findPersonByName = (personName: string | null) => {\n    return people.find(({ name }) => name === personName);\n  };\n\n  const peopleWithParents = people.map(person => {\n    const mother = findPersonByName(person.motherName);\n\n    const father = findPersonByName(person.fatherName);\n\n    return { ...person, mother, father };\n  });\n\n  if (!sex && !query && !centuries.length) {\n    return peopleWithParents;\n  }\n\n  return peopleWithParents.filter((person) => {\n    const sexFilter = sex ? sex === person.sex : true;\n    const queryFilter = !query || (\n      person.name.toLowerCase().includes(query)\n      || person.motherName?.toLowerCase().includes(query)\n      || person.fatherName?.toLowerCase().includes(query)\n    );\n\n    const bornCentury = (Math.ceil(person.born / 100)).toString();\n    const centuryFilter = !centuries.length\n      || centuries.includes(bornCentury);\n\n    return sexFilter && queryFilter && centuryFilter;\n  });\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { CENTURIES, SEARCH_FILTER } from '../utils/constants';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const params = new URLSearchParams(searchParams);\n  const selectedCenturies = params.getAll('century') || [];\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    const newQuery = e.target.value;\n\n    if (newQuery === '') {\n      params.delete('query');\n    } else {\n      params.set('query', newQuery);\n    }\n\n    setSearchParams(params);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.keys(SEARCH_FILTER).map(\n          (key) => (\n            <SearchLink\n              key={key}\n              params={{ sex: SEARCH_FILTER[key as keyof typeof SEARCH_FILTER] }}\n              className={classNames({\n                'is-active': params.get('sex')\n                  === SEARCH_FILTER[key as keyof typeof SEARCH_FILTER],\n              })}\n            >\n              {key}\n            </SearchLink>\n          ),\n        )}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={searchParams.get('query') || ''}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {Object.values(CENTURIES).map(century => (\n              <SearchLink\n                key={century}\n                params={{\n                  century: selectedCenturies.includes(century)\n                    ? selectedCenturies.filter(date => date !== century)\n                    : [...selectedCenturies, century],\n                }}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': selectedCenturies.includes(century) },\n                )}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ century: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ query: null, sex: null, century: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const getCurrentPeople = async () => {\n    setIsLoading(true);\n    try {\n      const currentPeople = await getPeople();\n\n      setPeople(currentPeople);\n    } catch {\n      setErrorMessage('Something went wrong');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getCurrentPeople();\n  }, []);\n\n  const isPeopleTableEmpty = !people.length && !errorMessage && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!!people.length && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isPeopleTableEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people.length && (\n                <PeopleTable people={people} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"home\" element={<Navigate to=\"..\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}